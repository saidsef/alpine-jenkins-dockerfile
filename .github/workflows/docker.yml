---
name: CI
on:
  push:
    branches:
      - main
    paths:
      - "Dockerfile"
      - "groovy/**"
      - "files/**"
      - "test/**"
      - ".github/workflows/docker.yml"
  pull_request:
    branches:
      - main
    paths:
      - "Dockerfile"
      - "groovy/**"
      - "files/**"
      - "test/**"
      - ".github/workflows/docker.yml"
  schedule:
    - cron: '0 7 * */1 1'

env:
  REGISTRY: docker.io
  OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set Tag Names
      run: |
        echo "TAG=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "DATE=v$(echo `date +'%Y.%m'`)" >> $GITHUB_ENV
    - name: Login to DockerHub
      uses: docker/login-action@v1
      if: success()
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image - (MAIN)
      uses: docker/build-push-action@v2
      if: success()
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: ./function
        file: ./Dockerfile
        platforms: linux/amd64
        pull: true
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO_NAME }}:${{ env.TAG == 'main' && 'latest' || env.TAG }}
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO_NAME }}:${{ env.TAG == 'main' && 'latest' || env.TAG }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'

  k8s-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ ! contains(github.ref, 'main') && github.event_name != 'schedule' }}
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run K8s test
        run: |
          kubectl cluster-info
          export NS=`cat deployment/kustomization.yml  | grep namespace | awk '{ print $2 }'`
          if [ -z "$NS" ]; then
            export NS='cicd'
          fi
          kubectl create namespace $NS
          kubectl apply -n $NS -k deployment/
          kubectl get all -n $NS

  auto-approve:
    runs-on: ubuntu-latest
    needs: [build, k8s-test]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - uses: hmarr/auto-approve-action@v2
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
